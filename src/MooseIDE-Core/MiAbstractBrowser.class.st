"
I am superclass for all browsers in Midas.
I provide a toolBar with:
	- Radio buttons to choose a reception mode: Follow, Freeze and Highlight.
	- Buttons to inspect and propagate the current selection.
	- A help button that shows the class comment for each browser. 

Concrete browsers should use my instance variable #model (MVC model, not Moose model).
It is created by the default #open method on class side. 
The model should inherit from MiAbstractModel and override:
Instance side:
	- #canFollowEntity: | which entities the browser can receive
	- #followEntity | what to do with the received entity in Follow mode
	- #highlightEntity | what to do with the received entity in Highlight mode
	- #miSelectedItem | entity (or entities) to propagate
Class side:	
	- #title | The browser window title
	- #menuCommandOn: | To be integrated into Midas Browsers menu
Spec2 methods: 
	#initializePresenters, #defaultLayout, ...

Please comment your browser as follow: 
*************************************************
A few lines describing the browser purpose.

- Follow:
Entities accepted and associated behavior.

- Highlight:
Highlight behavior.

- Propagate:
Propagated entities.
*************************************************
"
Class {
	#name : #MiAbstractBrowser,
	#superclass : #MiPresenter,
	#instVars : [
		'buses',
		'receivingMode',
		'specModel',
		'inspector'
	],
	#category : #'MooseIDE-Core-Browser'
}

{ #category : #keymaps }
MiAbstractBrowser class >> browserKey [

	"Override with a character to be used after m (for Moose) to open your browser"

	^ nil
]

{ #category : #menu }
MiAbstractBrowser class >> buildItemInMenu: aMenuGroupPresenter action: aBlock [

	self isAbstract ifTrue: [ ^ self ].

	aMenuGroupPresenter addItem: [ :item |
		item
			name: self title;
			action: aBlock;
			help: self helpMessage;
			icon: self menuIcon ]
]

{ #category : #'world menu' }
MiAbstractBrowser class >> buildMenuItemIn: aBuilder [

	"Method used in subclasses"

	^ (aBuilder item: self menuItem)
		  parent: self menuParent;
		  label: self menuLabel;
		  icon: self menuIcon;
		  help: self helpMessage;
		  order: self menuPriority;
		  action: [ self open ];
		  keyText: self keyText;
		  yourself
]

{ #category : #'world menu' }
MiAbstractBrowser class >> buildMenuItemIn: aBuilder action: aBlock [
	"Method used in subclasses"

	^ (aBuilder item: self menuItem)
		  parent: self menuParent;
		  label: self menuLabel;
		  icon: self menuIcon;
		  help: self helpMessage;
		  order: self menuPriority;
		  action: aBlock;
		  keyText: self keyText;
		  yourself
]

{ #category : #'world menu' }
MiAbstractBrowser class >> famixMenuRoot [

	^ #Famix
]

{ #category : #'world menu' }
MiAbstractBrowser class >> helpMessage [

	^ self comment ifNil: [ '' ] ifNotNil: [ :comment |
		  String streamContents: [ :s |
			  comment lineIndicesDo: [ :start :end :ignored |
				  start = (end + 1) ifTrue: [ "stop at empty line" ^ s contents ].
				  start = 1 ifFalse: [ s nextPut: Character cr ].
				  start to: end do: [ :i | s nextPut: (comment at: i) ] ] ] ]
]

{ #category : #testing }
MiAbstractBrowser class >> isAbstract [ 
	^ self == MiAbstractBrowser
]

{ #category : #testing }
MiAbstractBrowser class >> isModelImporter [
	^false
]

{ #category : #keymaps }
MiAbstractBrowser class >> keyText [

	^ self browserKey ifNotNil: [ :aCharacter |
		  'M, {1}' format: { aCharacter asUppercase } ]
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuCodeToolsPriority [

	^ 20
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuCommandOn: aBuilder [
	"Library > Famix > Old browsers"

	<worldMenu>
	(aBuilder item: self oldBrowserMenuRoot)
		parent: self famixMenuRoot;
		icon: self menuIcon;
		order: self oldBrowserMenuPriority
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuIcon [

	^ self iconNamed: self menuIconName
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuIconName [

	"Override if needed"

	^ #blank
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuItem [

	self subclassResponsibility
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuLabel [

	"Override if necessary"

	^ self title
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuMainToolsPriority [

	^ 0
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuMetaToolsPriority [

	^ 40
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuParent [

	"Override if necessary"

	^ self mooseMenuRoot
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuPharoToolsPriority [

	^ 30
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuPriority [

	^ 100
]

{ #category : #'world menu' }
MiAbstractBrowser class >> menuVisualizationToolsPriority [

	^ 10
]

{ #category : #menu }
MiAbstractBrowser class >> miBrowsersMenuPresenter [

	| rootMenu |
	rootMenu := SpMenuPresenter new.

	(self subclasses sortAscending: [ :browserClass |
		 browserClass menuPriority ]) do: [ :browserClass |
		browserClass buildItemInMenu: rootMenu action: [ self open ] ].

	^ rootMenu
]

{ #category : #'world menu' }
MiAbstractBrowser class >> mooseMenuRoot [

	^ #Moose
]

{ #category : #'instance creation' }
MiAbstractBrowser class >> new [

	^ self on: self newModel
]

{ #category : #'world menu' }
MiAbstractBrowser class >> newBrowser: aBrowserClass [

	aBrowserClass open
]

{ #category : #'instance creation' }
MiAbstractBrowser class >> newModel [
	"Override to return a model (in the MVC sense) for your browser"

	^ nil
]

{ #category : #'world menu' }
MiAbstractBrowser class >> oldBrowserMenuPriority [

	^ 30
]

{ #category : #'world menu' }
MiAbstractBrowser class >> oldBrowserMenuRoot [

	^ #'Old browsers'
]

{ #category : #'instance creation' }
MiAbstractBrowser class >> open [

	^ (self on: self newModel)
		  open;
		  followBus: self currentApplication defaultBus;
		  yourself
]

{ #category : #keymaps }
MiAbstractBrowser class >> openKeyMap [

	^ self browserKey ifNotNil: [
		  KMKeymap shortcut: self shortcut action: [ self open ] ]
]

{ #category : #'instance creation' }
MiAbstractBrowser class >> openOn: anEntity [

	^ (self on: self newModel)
		  open;
		  receiveEntity: anEntity;
		  beFrozen;
		  followBus: self currentApplication defaultBus;
		  yourself
]

{ #category : #keymaps }
MiAbstractBrowser class >> shortcut [

	^ self browserKey ifNotNil: [ :aCharacter |
		  $m shift meta , aCharacter shift meta ]
]

{ #category : #accessing }
MiAbstractBrowser class >> taskbarIcon [
	^MooseIcons mooseIcon

]

{ #category : #accessing }
MiAbstractBrowser class >> titleForModelName: mooseModelName [

	^ self title , ' (' , mooseModelName , ')'
]

{ #category : #specs }
MiAbstractBrowser class >> windowSize [

	^ 500 @ 400
]

{ #category : #testing }
MiAbstractBrowser >> acceptsDropFileExtension: aString [
	^false
]

{ #category : #actions }
MiAbstractBrowser >> beFrozen [

	self receivingMode: MiFreezeMode.
	self window updateReceivingModeButtons
]

{ #category : #'window control' }
MiAbstractBrowser >> browserClosed [
	buses do: [ :bus | bus unregisterBrowser: self ]
]

{ #category : #'window control' }
MiAbstractBrowser >> browserCollapsed [

	self beFrozen
]

{ #category : #'window control' }
MiAbstractBrowser >> browserExpanded [
	"should we 'unfroze' ?"
]

{ #category : #accessing }
MiAbstractBrowser >> buses [

	^ buses ifNil: [ Set new ]
]

{ #category : #testing }
MiAbstractBrowser >> canEditBuses [

	^ true
]

{ #category : #testing }
MiAbstractBrowser >> canFollow [

	^ true
]

{ #category : #testing }
MiAbstractBrowser >> canFollowEntity: anObject [

	"whether the browser accepts to deal with anObject"

	self subclassResponsibility
]

{ #category : #testing }
MiAbstractBrowser >> canHighlight [

	"Override to retrun true if you want to give your browser a highlight behavior. 
	This behavior should be define by overriding #highlightEntity:"

	^ false
]

{ #category : #testing }
MiAbstractBrowser >> canPropagate [

	| entity |
	"Ideally we should use miSelectedItemToPropagate but this would make the models browser really slow since it would copy the whole model and reject the stubs each time I'm called. So we do not care about checking the stubs here by calling #miSelectedItem.."
	entity := self miSelectedItem.
	^ (entity isCollection and: [ entity isNotEmpty ]) or: [
		  entity isMooseObject and: [ entity isCollection not ] ]
]

{ #category : #testing }
MiAbstractBrowser >> canTagEntities [

	^ true
]

{ #category : #'private - for tests' }
MiAbstractBrowser >> closeSettings [
	"to close the settings window when testing
	Should not be used otherwise"

	self hasSettings 
	ifTrue: [ self model settings window close]
]

{ #category : #layout }
MiAbstractBrowser >> defaultLayout [

	^ SpBoxLayout newVertical
		  add: #mainPresenter;
		  yourself
]

{ #category : #buses }
MiAbstractBrowser >> followBus: aBus [

	(self buses includes: aBus) ifTrue: [
		application defaultBus: aBus.
		^ self ].

	self buses add: aBus.
	aBus registerBrowser: self.
	self window ifNotNil: [ :window | window updateBusButton ].
	self receiveEntity: aBus logger mostRecentEntity.
	application defaultBus: aBus
]

{ #category : #actions }
MiAbstractBrowser >> followEntity: anEntity [
   anEntity ifNotNil: [ self updateWindowTitleWith: anEntity ].
	
]

{ #category : #actions }
MiAbstractBrowser >> freezeDuring: aBlock [

	| previousMode |
	previousMode := receivingMode.

	receivingMode := MiFreezeMode.

	aBlock ensure: [ receivingMode := previousMode ]
]

{ #category : #testing }
MiAbstractBrowser >> hasSettings [

	^false
]

{ #category : #testing }
MiAbstractBrowser >> hasVisualization [
	
	^ false
]

{ #category : #highlighting }
MiAbstractBrowser >> highlightEntity: anEntity [

	"Override to add behavior on highlight. 
	Don't forget to override #canHighlight to return true"

	
]

{ #category : #testing }
MiAbstractBrowser >> ifAutonomous: aBlock [
	
	self owner isNotNil and: [ 
		self owner isWindowPresenter ifTrue: aBlock ]
]

{ #category : #initialization }
MiAbstractBrowser >> initialize [

	super initialize.
	self setDefaultReceivingMode.
	buses := Set new
]

{ #category : #initialization }
MiAbstractBrowser >> initializeWindow: aMiWindowPresenter [

	super initializeWindow: aMiWindowPresenter.

	self shouldBuildToolbar ifTrue: [ aMiWindowPresenter buildToolbar ].

	aMiWindowPresenter whenClosedDo: [ self browserClosed ].
	aMiWindowPresenter withAdapterPerformOrDefer: [ :anAdapter |
		self registerToAdapterEvents: anAdapter ].

	aMiWindowPresenter initialExtent: self class windowSize.
	aMiWindowPresenter setContextBindingKeys
]

{ #category : #'private - for tests' }
MiAbstractBrowser >> inspector [

	^ inspector ifNil: [ inspector := MiInspectorBrowser ]
]

{ #category : #testing }
MiAbstractBrowser >> isMiBrowser [
	^ true
]

{ #category : #testing }
MiAbstractBrowser >> isModelImporter [
	^self class isModelImporter
]

{ #category : #accessing }
MiAbstractBrowser >> miSelectedItem [

	^ (MiNoSelectedElementToPropagateException browser: self) signal
]

{ #category : #accessing }
MiAbstractBrowser >> miSelectedItemToPropagate [
	"Hook to be able to add some filters in the model browser."

	^ self miSelectedItem
]

{ #category : #accessing }
MiAbstractBrowser >> model [
	^ specModel
]

{ #category : #accessing }
MiAbstractBrowser >> model: anObject [
	specModel := anObject
]

{ #category : #testing }
MiAbstractBrowser >> needUpdate: anEntity [

	^ anEntity ~= specModel selected
]

{ #category : #'private - accessing' }
MiAbstractBrowser >> receiveEntity: anEntity [

	"I am used by the Mi Application. You should use #globallySelect: anEntity that will transmit the message to me and the other browsers"

	receivingMode browser: self actOnEntity: anEntity.
	self updateToolbar
]

{ #category : #accessing }
MiAbstractBrowser >> receivingMode [

	^ receivingMode
]

{ #category : #accessing }
MiAbstractBrowser >> receivingMode: aReceivingMode [

	receivingMode := aReceivingMode
]

{ #category : #'window control' }
MiAbstractBrowser >> registerToAdapterEvents: anAdapter [
	"spec does not give access to window collapsing/expanding events
	 This is a hack to get them on Morph backend"

	anAdapter widget announcer when: WindowCollapsed do: [ self browserCollapsed ] for: self.
	anAdapter widget announcer when: WindowExpanded do: [ self browserExpanded ] for: self
]

{ #category : #accessing }
MiAbstractBrowser >> selectedTag [

	^ self model ifNil: [ nil ] ifNotNil: [ :model | model selectedTag ]
]

{ #category : #accessing }
MiAbstractBrowser >> selectedTag: aTag [

	self model
		ifNil: [ nil ]
		ifNotNil: [ :model | model selectedTag: aTag ].
	self updateToolbar
]

{ #category : #initialization }
MiAbstractBrowser >> setDefaultReceivingMode [

	self receivingMode: MiFollowMode
]

{ #category : #initialization }
MiAbstractBrowser >> setModelBeforeInitialization: aBrowserModel [
	aBrowserModel ifNil: [ ^self ].

	specModel := aBrowserModel.
	specModel browser: self
]

{ #category : #actions }
MiAbstractBrowser >> settings [

	self hasSettings ifTrue: [ specModel openSettings ]
]

{ #category : #testing }
MiAbstractBrowser >> shouldBuildToolbar [

	^ true
]

{ #category : #accessing }
MiAbstractBrowser >> tagList [

	^self model
		ifNil: [ #() ]
		ifNotNil: [ :model | model tagList ]
]

{ #category : #accessing }
MiAbstractBrowser >> tagName [
	^self selectedTag
		ifNil: [ '' ]
		ifNotNil: [ :tag | tag name ]
]

{ #category : #actions }
MiAbstractBrowser >> tagSelectedEntities [

	self model ifNotNil: [ :model | model tagSelectedEntities ]
]

{ #category : #buses }
MiAbstractBrowser >> unfollowBus: aBus [

	(self buses includes: aBus) ifFalse: [ ^ self ].
	self buses remove: aBus.
	aBus unregisterBrowser: self.
	self window ifNotNil: [ :window | window updateBusButton ]
]

{ #category : #actions }
MiAbstractBrowser >> updateToolbar [

	self window ifNotNil: [ :window | window updateToolbar ]
]

{ #category : #actions }
MiAbstractBrowser >> updateWindowTitleWith: anEntity [

	| modelName |
	modelName := (anEntity isMooseObject and: [ anEntity isMooseModel ])
		             ifTrue: [ anEntity name ]
		             ifFalse: [ anEntity printString ].
	self withWindowDo: [ :window |
		window title: (self class titleForModelName: modelName) ]
]
