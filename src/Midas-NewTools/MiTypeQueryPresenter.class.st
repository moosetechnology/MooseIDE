"
A query configuration presenter for the `FQTypeQuery` 

"
Class {
	#name : #MiTypeQueryPresenter,
	#superclass : #MiQueryConfigurationPresenter,
	#instVars : [
		'typesButton',
		'typesList'
	],
	#category : #'Midas-NewTools-Queries Browser configuration'
}

{ #category : #specs }
MiTypeQueryPresenter class >> title [
	^ 'Type Query'
]

{ #category : #layout }
MiTypeQueryPresenter >> buildLayout [

	| padding |
	padding := 5.
	self layout: (SpBoxLayout newLeftToRight
			 add: #typesButton
			 expand: false
			 fill: true
			 padding: padding;
			 yourself)
]

{ #category : #initialization }
MiTypeQueryPresenter >> initializePresenters [

	self initializeTypesButton
]

{ #category : #initialization }
MiTypeQueryPresenter >> initializeTypesButton [

	typesButton := self query availableTypes
		               ifEmpty: [ self noParameterMessage: 'type' ]
		               ifNotEmpty: [ 
			               self newButton
				               label: 'Select types';
				               icon: (self iconNamed: #checkboxSelected);
				               action: [ 
					               self newPopover
						               relativeTo: typesButton;
						               bePositionRight;
						               presenter: self typesList;
						               popup ];
				               yourself ]
]

{ #category : #'widgets configuration' }
MiTypeQueryPresenter >> labelFor: type [
	^ type mooseDescription name asEnglishPlural
]

{ #category : #initialization }
MiTypeQueryPresenter >> typesList [

	typesList := self newSelectableListForPopoverExtent: 120 @ 120.

	typesList
		display: [ :item | self labelFor: item ];
		items: self query availableTypes;
		selectItems: self query types;
		onActivation: [ :type | 
			self updateQueryWithSelectedTypes: typesList selectedItems ];
		onDeactivation: [ :type | 
			typesList selectedItems
				ifEmpty: [ 
					typesList selectItem: type.
					UIManager default
						alert: 'You must select at least one type'
						title: 'Cannot unselect all types' ]
				ifNotEmpty: [ 
					self updateQueryWithSelectedTypes: typesList selectedItems ] ].
	^ typesList
]

{ #category : #initialization }
MiTypeQueryPresenter >> updateQueryWithSelectedTypes: selectedTypes [

	| nonSelectedTypes |
	nonSelectedTypes := self query types difference: selectedTypes.
	selectedTypes do: [ :type | self query addType: type ].
	nonSelectedTypes do: [ :type | self query removeType: type ].
	self update.
	^ self notifyQueryChanged
]
